}
# # # # # # # # # # # VISUALIZATION CALLS # # # # # # # # # # # # #
#Bax_list <- phylo_viz(name = "Baxter_AOMDSS",
#        var_list = c("collection_date","inoculum","response_factor"), base_path)
Helm_list <- phylo_viz("Helm_DSS", c("collection_date","inoculum","response_factor"), base_path)
#!/usr/bin/env Rscript
library(dada2)
library(ShortRead)
library(ggplot2)
library(phyloseq)
library(decontam)
library(sva)
library(DECIPHER)
library(phangorn)
base_path = "/pollard/home/mpittman/dada2/"
base_path = "/Users/student/Documents/PollardRotation/dada2/"
source(paste0(base_path,"Code/viz_functions.R"))
options(tz="America/Los_Angeles")
# # # # # # # # # # # FILTERING FUNCTIONS # # # # # # # # # # # # #
# Decontamination
deco_ps <- function(ps, meta, taxa, out_plot, out_tab){
# Plot the library sizes - not sure if useful?
pdf(out_plot)
df <- as.data.frame(sample_data(ps)) # Put sample_data into a ggplot-friendly data.frame
df$LibrarySize <- sample_sums(ps)
df <- df[order(df$LibrarySize),]
df$Index <- seq(nrow(df))
ggplot(data=df, aes(x=Index, y=LibrarySize, color=response)) + geom_point()
dev.off()
# Remove contaminants based on negative controls
sample_data(ps)$is.neg <- sample_data(ps)$response == "0"
contamdf.prev <- isContaminant(ps, method="prevalence", neg="is.neg")
to_remove <- contamdf.prev[which(contamdf.prev$contaminant),]
ps.noncontam <- prune_taxa(!contamdf.prev$contaminant, ps)
# Save out filtering info
print(dim(taxa))
contam_tax <- taxa[which(row.names(taxa) %in% row.names(to_remove)),]
write.table(contam_tax, file = out_tab, sep = "\t")
# Create a new phyloseq object
new_seq = as.data.frame(otu_table(ps.noncontam))
new_GF = get_tree(new_seq)
return(read_seqtab(new_seq,taxa,meta,new_GF))
}
# Batch effect
debatch <- function(ps, meta, taxa){
# Extract variables from phyloseq object
abun_mat <- as.data.frame(otu_table(ps))
# log-transform the transposed data
my_data <-log(as.matrix(t(abun_mat)) +1)
my_data <- my_data[rowSums(my_data) > 0 ,]
# Create a null model and one accounting for my variable of interest
mod1 = model.matrix(~as.factor(meta$response))
mod0 = cbind(mod1[,1])
# Calculate batch coefficients
my_n_sv = num.sv(my_data,mod1,method="leek")
my_svseq = svaseq(my_data,mod1,mod0,n.sv=my_n_sv-1)
my_sv<-my_svseq$sv
# Remove batch coefficients
if(n.sv > 0) {
clean_df <- cleanY(my_data,mod1,my_sv)
} else{
clean_df <- my_data
}
# Create a new phyloseq object
new_seq = as.data.frame(t(clean_df))
new_GF = get_tree(new_seq)
return(read_seqtab(seq=new_seq,taxa=taxa,meta=meta,fitGR=new_GF))
}
# # # # # # # # # # # MAIN FUNCTION # # # # # # # # # # # # #
phylo_viz <- function(name, var_list, base_path){
# Read in data
seq <- readRDS(paste0(base_path, "Output/SeqTables/", name, "_seqtab_nochim.rds"))
taxa <- readRDS(paste0(base_path, "Output/Taxa/", name,"_taxa_silva_plus.rds"))
meta <- read.table(paste0(base_path, "MetaData/", name, "_processed.txt"),
sep = "\t", header = TRUE)
# Get rid of empty taxonomy, add response factor column
seq <- seq[which(row.names(seq) %in% row.names(meta)),]
seq <- as.data.frame(seq[,colSums(seq) > 0])
meta$response_factor <- meta$response
meta$response_factor <- gsub(1, "yes", meta$response_factor)
meta$response_factor <- gsub(0, "no", meta$response_factor)
# Create phylogenetic tree
fitGR <- get_tree(seq)
# Create phyloseq object, decontaminate it, debatch it
ps = read_seqtab(seq,taxa,meta,fitGR)
decon = deco_ps(ps, meta, taxa,
out_plot = paste0(base_path, "Output/Decontam/",name,"_LibrarySize.pdf"),
out_tab = paste0(base_path, "Output/Decontam/", name, "_removedTaxa.tsv"))
debat = debatch(ps=decon, meta=meta, taxa=taxa)
# Save RData
saveRDS(ps, file = paste0(base_path, "Output/RData/", name,"_ps.rds"))
saveRDS(decon, file = paste0(base_path, "Output/RData/", name,"_decon.rds"))
saveRDS(debat, file = paste0(base_path, "Output/RData/", name,"_debat.rds"))
# Visualizations for the three datasets
suff_list = c("Uncorrected", "Decontaminated", "Batch-Corrected")
seq_list <- c(ps, decon, debat)
for (i in 1:3){
suff = unlist(suff_list[i])
ps_ = seq_list[[i]]
PCoA(ps_, var_list, name, suff, base_path)
heat_viz(ps_, name, suff, base_path)
tree_viz(ps_, name, var_list, suff, base_path)
if(suff != "Batch-Corrected"){
viz_diversity(ps_, var_list, name, suff, base_path)
}
# Return the de-batched phyloseq object so we can use it downstream
return(list(ps, debat))
}
}
# # # # # # # # # # # VISUALIZATION CALLS # # # # # # # # # # # # #
#Bax_list <- phylo_viz(name = "Baxter_AOMDSS",
#        var_list = c("collection_date","inoculum","response_factor"), base_path)
Helm_list <- phylo_viz("Helm_DSS", c("collection_date","inoculum","response_factor"), base_path)
# Remove batch coefficients
if(my_n_sv > 0) {
clean_df <- cleanY(my_data,mod1,my_sv)
} else{
clean_df <- my_data
}
saveRDS(ps, file = paste0(base_path, "Output/RData/", name,"_ps.rds"))
saveRDS(decon, file = paste0(base_path, "Output/RData/", name,"_decon.rds"))
phylo_viz("TMM_DSS", c("collection_date","response_factor"), base_path)
#!/usr/bin/env Rscript
library(dada2)
library(ShortRead)
library(ggplot2)
library(phyloseq)
library(decontam)
library(sva)
library(DECIPHER)
library(phangorn)
base_path = "/pollard/home/mpittman/dada2/"
base_path = "/Users/student/Documents/PollardRotation/dada2/"
source(paste0(base_path,"Code/viz_functions.R"))
options(tz="America/Los_Angeles")
# # # # # # # # # # # FILTERING FUNCTIONS # # # # # # # # # # # # #
# Decontamination
deco_ps <- function(ps, meta, taxa, out_plot, out_tab){
# Plot the library sizes - not sure if useful?
pdf(out_plot)
df <- as.data.frame(sample_data(ps)) # Put sample_data into a ggplot-friendly data.frame
df$LibrarySize <- sample_sums(ps)
df <- df[order(df$LibrarySize),]
df$Index <- seq(nrow(df))
ggplot(data=df, aes(x=Index, y=LibrarySize, color=response)) + geom_point()
dev.off()
# Remove contaminants based on negative controls
sample_data(ps)$is.neg <- sample_data(ps)$response == "0"
contamdf.prev <- isContaminant(ps, method="prevalence", neg="is.neg")
to_remove <- contamdf.prev[which(contamdf.prev$contaminant),]
ps.noncontam <- prune_taxa(!contamdf.prev$contaminant, ps)
# Save out filtering info
print(dim(taxa))
contam_tax <- taxa[which(row.names(taxa) %in% row.names(to_remove)),]
write.table(contam_tax, file = out_tab, sep = "\t")
# Create a new phyloseq object
new_seq = as.data.frame(otu_table(ps.noncontam))
new_GF = get_tree(new_seq)
return(read_seqtab(new_seq,taxa,meta,new_GF))
}
# Batch effect
debatch <- function(ps, meta, taxa){
# Extract variables from phyloseq object
abun_mat <- as.data.frame(otu_table(ps))
# log-transform the transposed data
my_data <-log(as.matrix(t(abun_mat)) +1)
my_data <- my_data[rowSums(my_data) > 0 ,]
# Create a null model and one accounting for my variable of interest
mod1 = model.matrix(~as.factor(meta$response))
mod0 = cbind(mod1[,1])
# Calculate batch coefficients
my_n_sv = num.sv(my_data,mod1,method="leek")
my_svseq = svaseq(my_data,mod1,mod0,n.sv=my_n_sv-1)
my_sv<-my_svseq$sv
# Remove batch coefficients
if(my_n_sv > 0) {
clean_df <- cleanY(my_data,mod1,my_sv)
} else{
clean_df <- my_data
}
# Create a new phyloseq object
new_seq = as.data.frame(t(clean_df))
new_GF = get_tree(new_seq)
return(read_seqtab(seq=new_seq,taxa=taxa,meta=meta,fitGR=new_GF))
}
name = "TMM_DSS"
var_list = "response_factor"
# Read in data
seq <- readRDS(paste0(base_path, "Output/SeqTables/", name, "_seqtab_nochim.rds"))
taxa <- readRDS(paste0(base_path, "Output/Taxa/", name,"_taxa_silva_plus.rds"))
meta <- read.table(paste0(base_path, "MetaData/", name, "_processed.txt"),
sep = "\t", header = TRUE)
# Get rid of empty taxonomy, add response factor column
seq <- seq[which(row.names(seq) %in% row.names(meta)),]
seq <- as.data.frame(seq[,colSums(seq) > 0])
meta$response_factor <- meta$response
meta$response_factor <- gsub(1, "yes", meta$response_factor)
meta$response_factor <- gsub(0, "no", meta$response_factor)
# Create phylogenetic tree
fitGR <- get_tree(seq)
# Create phyloseq object, decontaminate it, debatch it
ps = read_seqtab(seq,taxa,meta,fitGR)
decon = deco_ps(ps, meta, taxa,
out_plot = paste0(base_path, "Output/Decontam/",name,"_LibrarySize.pdf"),
out_tab = paste0(base_path, "Output/Decontam/", name, "_removedTaxa.tsv"))
debat = debatch(ps=decon, meta=meta, taxa=taxa)
# Save RData
saveRDS(ps, file = paste0(base_path, "Output/RData/", name,"_ps.rds"))
saveRDS(decon, file = paste0(base_path, "Output/RData/", name,"_decon.rds"))
saveRDS(debat, file = paste0(base_path, "Output/RData/", name,"_debat.rds"))
saveRDS(decon, file = paste0(base_path, "Output/RData/", name,"_debat.rds"))
debat = decon
# Visualizations for the three datasets
suff_list = c("Uncorrected", "Decontaminated", "Batch-Corrected")
seq_list <- c(ps, decon, debat)
for (i in 1:3){
suff = unlist(suff_list[i])
ps_ = seq_list[[i]]
PCoA(ps_, var_list, name, suff, base_path)
heat_viz(ps_, name, suff, base_path)
tree_viz(ps_, name, var_list, suff, base_path)
if(suff != "Batch-Corrected"){
viz_diversity(ps_, var_list, name, suff, base_path)
}
# Return the de-batched phyloseq object so we can use it downstream
return(list(ps, debat))
}
phylo_viz("UCSD_TNBS", c("collection_date","inoculum","response_factor"), base_path
)
name = "UCSD_TNBS"
var_list = c("collection_date","inoculum","response_factor")
# Read in data
seq <- readRDS(paste0(base_path, "Output/SeqTables/", name, "_seqtab_nochim.rds"))
taxa <- readRDS(paste0(base_path, "Output/Taxa/", name,"_taxa_silva_plus.rds"))
meta <- read.table(paste0(base_path, "MetaData/", name, "_processed.txt"),
sep = "\t", header = TRUE)
# Get rid of empty taxonomy, add response factor column
seq <- seq[which(row.names(seq) %in% row.names(meta)),]
seq <- as.data.frame(seq[,colSums(seq) > 0])
meta$response_factor <- meta$response
meta$response_factor <- gsub(1, "yes", meta$response_factor)
meta$response_factor <- gsub(0, "no", meta$response_factor)
# Create phylogenetic tree
fitGR <- get_tree(seq)
# Create phyloseq object, decontaminate it, debatch it
ps = read_seqtab(seq,taxa,meta,fitGR)
decon = deco_ps(ps, meta, taxa,
out_plot = paste0(base_path, "Output/Decontam/",name,"_LibrarySize.pdf"),
out_tab = paste0(base_path, "Output/Decontam/", name, "_removedTaxa.tsv"))
debat = debatch(ps=decon, meta=meta, taxa=taxa)
# Save RData
saveRDS(ps, file = paste0(base_path, "Output/RData/", name,"_ps.rds"))
saveRDS(decon, file = paste0(base_path, "Output/RData/", name,"_decon.rds"))
saveRDS(debat, file = paste0(base_path, "Output/RData/", name,"_debat.rds"))
# Visualizations for the three datasets
suff_list = c("Uncorrected", "Decontaminated", "Batch-Corrected")
seq_list <- c(ps, decon, debat)
for (i in 1:3){
suff = unlist(suff_list[i])
ps_ = seq_list[[i]]
PCoA(ps_, var_list, name, suff, base_path)
heat_viz(ps_, name, suff, base_path)
tree_viz(ps_, name, var_list, suff, base_path)
if(suff != "Batch-Corrected"){
viz_diversity(ps_, var_list, name, suff, base_path)
}
# Return the de-batched phyloseq object so we can use it downstream
return(list(ps, debat))
}
name = "UCSD_IL10"
var_list = c("collection_date","cage","gender","run",
"timepoint","response_factor")
# Read in data
seq <- readRDS(paste0(base_path, "Output/SeqTables/", name, "_seqtab_nochim.rds"))
taxa <- readRDS(paste0(base_path, "Output/Taxa/", name,"_taxa_silva_plus.rds"))
meta <- read.table(paste0(base_path, "MetaData/", name, "_processed.txt"),
sep = "\t", header = TRUE)
# Get rid of empty taxonomy, add response factor column
seq <- seq[which(row.names(seq) %in% row.names(meta)),]
seq <- as.data.frame(seq[,colSums(seq) > 0])
meta$response_factor <- meta$response
meta$response_factor <- gsub(1, "yes", meta$response_factor)
meta$response_factor <- gsub(0, "no", meta$response_factor)
# Create phylogenetic tree
fitGR <- get_tree(seq)
#!/usr/bin/env Rscript
library(dada2)
library(ShortRead)
library(ggplot2)
library(phyloseq)
library(decontam)
library(sva)
library(DECIPHER)
library(phangorn)
base_path = "/pollard/home/mpittman/dada2/"
base_path = "/Users/student/Documents/PollardRotation/dada2/"
source(paste0(base_path,"Code/viz_functions.R"))
options(tz="America/Los_Angeles")
name = "Baxter_AOMDSS"
var_list = c("collection_date","inoculum","response_factor")
# Decontamination
deco_ps <- function(ps, meta, taxa, out_plot, out_tab){
# Plot the library sizes - not sure if useful?
pdf(out_plot)
df <- as.data.frame(sample_data(ps)) # Put sample_data into a ggplot-friendly data.frame
df$LibrarySize <- sample_sums(ps)
df <- df[order(df$LibrarySize),]
df$Index <- seq(nrow(df))
ggplot(data=df, aes(x=Index, y=LibrarySize, color=response)) + geom_point()
dev.off()
# Remove contaminants based on negative controls
sample_data(ps)$is.neg <- sample_data(ps)$response == "0"
contamdf.prev <- isContaminant(ps, method="prevalence", neg="is.neg")
to_remove <- contamdf.prev[which(contamdf.prev$contaminant),]
ps.noncontam <- prune_taxa(!contamdf.prev$contaminant, ps)
# Save out filtering info
print(dim(taxa))
contam_tax <- taxa[which(row.names(taxa) %in% row.names(to_remove)),]
write.table(contam_tax, file = out_tab, sep = "\t")
# Create a new phyloseq object
new_seq = as.data.frame(otu_table(ps.noncontam))
new_GF = get_tree(new_seq)
return(read_seqtab(new_seq,taxa,meta,new_GF))
}
# Batch effect
debatch <- function(ps, meta, taxa){
# Extract variables from phyloseq object
abun_mat <- as.data.frame(otu_table(ps))
# log-transform the transposed data
my_data <-log(as.matrix(t(abun_mat)) +1)
my_data <- my_data[rowSums(my_data) > 0 ,]
# Create a null model and one accounting for my variable of interest
mod1 = model.matrix(~as.factor(meta$response))
mod0 = cbind(mod1[,1])
# Calculate batch coefficients
my_n_sv = num.sv(my_data,mod1,method="leek")
my_svseq = svaseq(my_data,mod1,mod0,n.sv=my_n_sv-1)
my_sv<-my_svseq$sv
# Remove batch coefficients
if(my_n_sv > 0) {
clean_df <- cleanY(my_data,mod1,my_sv)
} else{
clean_df <- my_data
}
# Create a new phyloseq object
new_seq = as.data.frame(t(clean_df))
new_GF = get_tree(new_seq)
return(read_seqtab(seq=new_seq,taxa=taxa,meta=meta,fitGR=new_GF))
}
ps = readRDS(paste0(base_path, "Output/RData/", name,"_ps.rds"))
decon = readRDS(paste0(base_path, "Output/RData/", name,"_decon.rds")
)
debat = readRDS(paste0(base_path, "Output/RData/", name,"_debat.rds"))
suff = "Uncorrected"
# Save out to file
out_path = paste0(base_path, "Output/PhyloSeq/AbundanceTree/",name,"_",suff,"_Trees.pdf")
pdf(out_path)
# Select top50 taxa
physeq = prune_taxa(names(sort(taxa_sums(ps),TRUE)[1:50]), ps)
# map color to taxonomic class
plot_tree(physeq, ladderize="left", color="Class",
title = paste0(name, " Phylogenic tree (Class), ", suff ))
plot_tree(physeq, ladderize="left", color="Phylum",
title = paste0(name, " Phylogenic tree (Phylum), ", suff ))
for (var in var_list){
# map color to environmental factors
plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff ))
}
dev.off()
out_path = paste0(base_path, "Output/PhyloSeq/Heatmap/",name,"_",suff,"_Heatmaps.pdf")
pdf(out_path)
theme_set(theme_bw())
gpt <- subset_taxa(ps, Kingdom=="Bacteria")
gpt <- prune_taxa(names(sort(taxa_sums(gpt),TRUE)[1:50]), gpt)
# Plot the heatmap
print(plot_heatmap(gpt, "NMDS", "bray", "response_factor", "Family",
low="#000033", high="#FF3300"))
# Create dendrogram/heatmap from matrix
top_taxa <- as.data.frame(tax_table(gpt))
taxa_names(gpt) <- make.names(top_taxa$Family, unique=TRUE)
heatmap(otu_table(gpt))
dev.off()
suff = "Batch-Corrected"
out_path = paste0(base_path, "Output/PhyloSeq/Heatmap/",name,"_",suff,"_Heatmaps.pdf")
pdf(out_path)
theme_set(theme_bw())
gpt <- subset_taxa(debat, Kingdom=="Bacteria")
gpt <- prune_taxa(names(sort(taxa_sums(gpt),TRUE)[1:50]), gpt)
print(plot_heatmap(gpt, "NMDS", "bray", "response_factor", "Family",
low="#000033", high="#FF3300"))
top_taxa <- as.data.frame(tax_table(gpt))
taxa_names(gpt) <- make.names(top_taxa$Family, unique=TRUE)
heatmap(otu_table(gpt))
dev.off()
# Save out to file
out_path = paste0(base_path, "Output/PhyloSeq/AbundanceTree/",name,"_",suff,"_Trees.pdf")
pdf(out_path)
# Select top50 taxa
physeq = prune_taxa(names(sort(taxa_sums(ps),TRUE)[1:50]), ps)
# map color to taxonomic class
plot_tree(physeq, ladderize="left", color="Class",
title = paste0(name, " Phylogenic tree (Class), ", suff ))
plot_tree(physeq, ladderize="left", color="Phylum",
title = paste0(name, " Phylogenic tree (Phylum), ", suff ))
for (var in var_list){
# map color to environmental factors
plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff ))
}
dev.off()
bar_list
var_list
for (var in var_list){
# map color to environmental factors
plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff ))
}
plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff ))
print(plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff )))
plot_tree(physeq, ladderize="left", color="Phylum",
title = paste0(name, " Phylogenic tree (Phylum), ", suff ))
# Save out to file
out_path = paste0(base_path, "Output/PhyloSeq/AbundanceTree/",name,"_",suff,"_Trees.pdf")
pdf(out_path)
# Select top50 taxa
physeq = prune_taxa(names(sort(taxa_sums(ps),TRUE)[1:50]), ps)
# map color to taxonomic class
plot_tree(physeq, ladderize="left", color="Class",
title = paste0(name, " Phylogenic tree (Class), ", suff ))
plot_tree(physeq, ladderize="left", color="Phylum",
title = paste0(name, " Phylogenic tree (Phylum), ", suff ))
for (var in var_list){
# map color to environmental factors
print(plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff )))
}
dev.off()
plot_tree(physeq, ladderize="left", color="Class",
title = paste0(name, " Phylogenic tree (Class), ", suff ))
plot_tree(physeq, ladderize="left", color="Class",
title = paste0(name, " Phylogenic tree (Class), ", suff ))
print(plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff )))
plot_tree(physeq)
dev.off
dev.off()
dev.off()
print(plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff )))
suff= "Uncorrected"
# Save out to file
out_path = paste0(base_path, "Output/PhyloSeq/AbundanceTree/",name,"_",suff,"_Trees.pdf")
pdf(out_path)
# Select top50 taxa
physeq = prune_taxa(names(sort(taxa_sums(ps),TRUE)[1:50]), ps)
# map color to taxonomic class
plot_tree(physeq, ladderize="left", color="Class",
title = paste0(name, " Phylogenic tree (Class), ", suff ))
plot_tree(physeq, ladderize="left", color="Phylum",
title = paste0(name, " Phylogenic tree (Phylum), ", suff ))
for (var in var_list){
# map color to environmental factors
print(plot_tree(physeq, ladderize="left", color=var,
title = paste0(name, " Phylogenic tree by ", var, ", ", suff )))
}
dev.off()
data = read.table("output/Parameter_Search_Results_1", sep = "\t")
get.wd()
wd()
getwd()
setwd("/Users/student/Documents/BMI206/bmi203-final")
data = read.table("output/Parameter_Search_Results_1", sep = "\t")
getwd
getwd()
data = read.table(paste0(wd,"/output/Parameter_Search_Results_1"), sep = "\t")
wd = "/Users/student/Documents/BMI206/bmi203-final"
data = read.table(paste0(wd,"/output/Parameter_Search_Results_1"), sep = "\t")
data = read.table(paste0(wd,"/output/Parameter_Search_Results_1"), sep = "\t")
data = read.table(paste0(wd,"/output/Parameter_Search_Results_1.tsv"), sep = "\t")
data = read.table(paste0(wd,"ParameterSearchResults_1.tsv"), sep = "\t")
setwd("/Users/student/Documents/BMI206/bmi203-final/output")
data = read.table(paste0(wd,"ParameterSearchResults_1.tsv"), sep = "\t")
getwd()
setwd("/Users/student/Documents/BMI206/bmi203-final/output")
data = read.table("ParameterSearchResults_1.tsv", sep = "\t")
View(data)
setwd("/Users/student/Documents/BMI206/bmi203-final/output")
df = read.table("ParameterSearchResults_1.tsv", sep = "\t")
names(df) = c("activationFunction","NumEpochs","BatchSize",
"OptimizationMetric","learningRate","Score")
# Scatterplot of epochs, colored by activation function
ggplot(df, aes(x = NumEpochs, y = Score, color = activationFunction)) +
geom_point(position = position_dodge(width = 0.4))
# Scatterplot of epochs, colored by optimization metric
ggplot(df, aes(x = NumEpochs, y = Score, color = OptimizationMetric)) +
geom_point(position = position_dodge(width = 0.4))
# Scatterplot of batch sizes, colored by activation function
ggplot(df, aes(x = BatchSize, y = Score, color = activationFunction)) +
geom_point(position = position_dodge(width = 0.4))
View(data)
View(data)
View(df)
library(ggplot2)
ggplot(df, aes(x = NumEpochs, y = Score, color = activationFunction)) +
geom_point(position = position_dodge(width = 0.4))
ggplot(df, aes(x = NumEpochs, y = Score, color = OptimizationMetric)) +
geom_point(position = position_dodge(width = 0.4))
ggplot(df, aes(x = BatchSize, y = Score, color = activationFunction)) +
geom_point(position = position_dodge(width = 0.4))
